SET(STM32CUBE_SEARCH_PATHS ".." "../.." "../../.." "../../../.." "../../../../..")

GET_PROPERTY(CHIP GLOBAL PROPERTY GlobalCHIP)
MESSAGE(STATUS "for stm32cube chip is ${CHIP}")

IF(CHIP_PLATFORM STREQUAL "STM32")
	MESSAGE(STATUS "Searching for STM32Cube SDK.")
ELSE()
	MESSAGE(FATAL_ERROR "STM32Cube SDK is only supported with STM32 platform.")
ENDIF()

FUNCTION(CHECK_STM32CUBE B_PATH)
	GET_FILENAME_COMPONENT(A_PATH ${B_PATH} ABSOLUTE)
	IF(NOT EXISTS ${A_PATH})
		SET(IS_STM32CUBE FALSE PARENT_SCOPE)
	ELSE()
		IF(NOT EXISTS ${A_PATH}/Drivers)
			SET(IS_STM32CUBE FALSE PARENT_SCOPE)
		ELSE()
			IF(NOT EXISTS ${A_PATH}/Drivers/CMSIS)
				SET(IS_STM32CUBE FALSE PARENT_SCOPE)
			ELSEIF(NOT EXISTS ${A_PATH}/Drivers/BSP)
				SET(IS_STM32CUBE FALSE PARENT_SCOPE)
			ELSE()
				FILE(GLOB C_PATH "${A_PATH}/Drivers/${CHIP_PLATFORM}${CHIP_FAMILY}*")
				IF(C_PATH)
					SET(IS_STM32CUBE TRUE PARENT_SCOPE)
				ELSE()
					SET(IS_STM32CUBE FALSE PARENT_SCOPE)
				ENDIF()
			ENDIF()
		ENDIF()
	ENDIF()
ENDFUNCTION()

IF(NOT STM32CUBE_ROOT) 
	FOREACH(i ${STM32CUBE_SEARCH_PATHS})
		CHECK_STM32CUBE(${i})
		IF(IS_STM32CUBE)
			SET(STM32CUBE_ROOT ${i})
			MESSAGE(STATUS "Found STM32CUBE: ${STM32CUBE_ROOT}")
			BREAK()
		ENDIF()
	ENDFOREACH()
	IF(NOT STM32CUBE_ROOT)
		MESSAGE(FATAL_ERROR "Could not find STM32CUBE in any of the search paths: ${STM32CUBE_SEARCH_PATHS}") 
	ENDIF()
ELSE()
	CHECK_STM32CUBE(STM32CUBE_ROOT)
	IF(IS_STM32CUBE)
		MESSAGE(STATUS "Using supplied STM32CUBE_ROOT: ${STM32CUBE_ROOT}") 
	ELSE()
		MESSAGE(FATAL_ERROR "STM32Cube not found in STM32CUBE_ROOT: ${STM32CUBE_ROOT}")
	ENDIF()
ENDIF()

SET(STM32CUBE_CMSIS ${STM32CUBE_ROOT}/Drivers/CMSIS)
SET(STM32CUBE_HAL ${STM32CUBE_ROOT}/Drivers/STM32${CHIP_FAMILY}xx_HAL_Driver)
SET(STM32CUBE_BSP ${STM32CUBE_ROOT}/Drivers/BSP/STM32746G-Discovery)
SET(STM32CUBE_BSP_COMPONENTS ${STM32CUBE_ROOT}/Drivers/BSP/Components)

# Find Include Directories
FUNCTION(FIND_HEADER_DIRS VAR FOLDER)

	FILE(GLOB_RECURSE HEADER_DIRS_R "${FOLDER}/*.h")
	SET(HEADER_DIRS_1 "")

	FOREACH(i ${HEADER_DIRS_R})
		GET_FILENAME_COMPONENT(T1 ${i} REALPATH)
		GET_FILENAME_COMPONENT(T2 ${T1} PATH)
		LIST(APPEND HEADER_DIRS_1 ${T2})
	ENDFOREACH()

	LIST(REMOVE_DUPLICATES HEADER_DIRS_1)
	SET(${VAR} ${HEADER_DIRS_1} PARENT_SCOPE)

ENDFUNCTION()

# CMSIS Include dirs
FIND_HEADER_DIRS(STM32CUBE_CMSIS_INC_DIRS ${STM32CUBE_CMSIS}/Device)
GET_FILENAME_COMPONENT(T1 "${STM32CUBE_CMSIS}/Include" REALPATH)
LIST(APPEND STM32CUBE_CMSIS_INC_DIRS ${T1})

# HAL Include dirs
SET(STM32CUBE_HAL_INC_DIRS ${STM32CUBE_HAL}/Inc)

# BSP Include dirs
FIND_HEADER_DIRS(STM32CUBE_BSP_COMPONENTS_INC_DIRS ${STM32CUBE_BSP_COMPONENTS})
FIND_HEADER_DIRS(STM32CUBE_BSP_INC_DIRS ${STM32CUBE_BSP})

LIST(APPEND STM32CUBE_INC_DIRS ${STM32CUBE_CMSIS_INC_DIRS})
LIST(APPEND STM32CUBE_INC_DIRS ${STM32CUBE_HAL_INC_DIRS})
LIST(APPEND STM32CUBE_INC_DIRS ${STM32CUBE_BSP_INC_DIRS})

#MESSAGE(STATUS ${STM32CUBE_INC_DIRS})

# Find source files

# CMSIS Source Files
FILE(GLOB_RECURSE STM32CUBE_CMSIS_SOURCES "${STM32CUBE_CMSIS}/DSP_Lib/Source/*.c")

# HAL Source Files
FILE(GLOB_RECURSE STM32CUBE_HAL_SOURCES "${STM32CUBE_HAL}/Src/*.c")

# BSP Source Files
FILE(GLOB_RECURSE STM32CUBE_BSP_SOURCES "${STM32CUBE_BSP}/*.c")
FILE(GLOB_RECURSE STM32CUBE_BSP_COMPONENTS_SOURCES "${STM32CUBE_BSP_COMPONENTS}/*.c")

# Find startup assembly file in CMSIS
FILE(GLOB_RECURSE STM32CUBE_CMSIS_ASM_FILES "${STM32CUBE_CMSIS}/Device/ST/${CHIP_PLATFORM}${CHIP_FAMILY}xx/Source/Templates/gcc/startup_*.s")

FOREACH(i ${STM32CUBE_CMSIS_ASM_FILES})
	GET_FILENAME_COMPONENT(T0 ${i} NAME)
	STRING(REGEX REPLACE "^startup_(.*)\\.s$" "\\1" T1 ${T0})
	STRING(TOUPPER ${T1} T2)
	STRING(REPLACE "XX" ".*" T3 ${T2})
	IF(${CHIP} MATCHES ${T3})
		MESSAGE(STATUS "Matching ASM Init file: ${T0}")
		SET(STM32CUBE_CMSIS_ASM ${i})
	ENDIF()
	#MESSAGE(STATUS "BAAA: ${T3}")
ENDFOREACH()

IF(NOT STM32CUBE_CMSIS_ASM) 
	MESSAGE(FATAL_ERROR "Cannot find matching ASM file in ${STM32CUBE_CMSIS}/Device/ST/${CHIP_PLATFORM}${CHIP_FAMILY}xx/Source/Templates/gcc")
ENDIF()

SET(STM32CUBE_SOURCES ${STM32CUBE_CMSIS_SOURCES} ${STM32CUBE_CMSIS_ASM} ${STM32CUBE_HAL_SOURCES} ${STM32CUBE_BSP_SOURCES} ${STM32CUBE_BSP_COMPONENTS_SOURCES})

FOREACH(i ${STM32CUBE_SOURCES})
	GET_FILENAME_COMPONENT(T1 "${STM32CUBE_ROOT}" REALPATH)
	FILE(RELATIVE_PATH T0 ${T1} ${i})
	#MESSAGE(STATUS ${T0})
ENDFOREACH()

# This is a workaround for the very shitty Windows CMD line maximum length of 8192 characters...
# Split the list of objects into several static libraries, each one with a command line shorter than 8192

LIST(LENGTH STM32CUBE_SOURCES T0)

MESSAGE(STATUS "Total number of source files in STM32Cube: ${T0}")
MESSAGE(STATUS "Splitting ${T0} source files into libs (Win 8192 char limit)")

SET(T2 0)
SET(T3 "")
SET(T4 0)
SET(T5 0)
SET(T6 1)
SET(STM32CUBE_LIBS "")
FOREACH(i ${STM32CUBE_SOURCES})
	STRING(LENGTH ${i} T1)
	MATH(EXPR T2 "${T2}+${T1}")
	LIST(APPEND T3 ${i})
	LIST(LENGTH T3 T5)
	IF(${T2} GREATER 7000)
		MESSAGE(STATUS "Library ${T4}: ${T5} files, total filename length ${T2}.")
		ADD_LIBRARY("stm32cube_p${T4}" STATIC ${T3})
		LIST(APPEND STM32CUBE_LIBS "stm32cube_p${T4}")
		SET(T2 0)
		SET(T3 "")
		MATH(EXPR T4 "${T4}+1")
	ELSEIF(${T6} EQUAL ${T0})
		MESSAGE(STATUS "Library ${T4}: ${T5} files, total filename length ${T2}.")
		ADD_LIBRARY("stm32cube_p${T4}" STATIC ${T3})
		LIST(APPEND STM32CUBE_LIBS "stm32cube_p${T4}")
	ENDIF()
	MATH(EXPR T6 "${T6}+1")
ENDFOREACH()

INCLUDE(FindPackageHandleStandardArgs) 
FIND_PACKAGE_HANDLE_STANDARD_ARGS(STM32CUBE DEFAULT_MSG STM32CUBE_ROOT STM32CUBE_INC_DIRS STM32CUBE_LIBS) 
