# CMake script for building projects on STM32 / Cortex-M Microcontrollers
# Copyright 2017 Victor Pecanins
#
# In Windows:
# - Use GIT Bash MSYS console
# - Use cmake for windows version (add it to the GIT Bash $PATH)
# - Install msys-make in the GIT Bash with mingw-get
# - gcc-arm-none-eabi for windows
# - Generate Makefiles calling: cmake . -G"MSYS Makefiles"
#
# In Linux:
# <Not yet tested>
#
#
# This file: Toolchain-related configurations:
# - Decode CHIP_PLATFORM and CHIP_FAMILY from CHIP
# - Include appropriate cmake file depending on CHIP_PLATFORM and CHIP_FAMILY
# - Find arm-none-eabi-gcc
# - Add .hex and .bin targets
# - Add size target
# - Add linker script
# - 

INCLUDE(CMakeForceCompiler)

# is TRUE on all UNIX-like OS's, including Apple OS X and CygWin
MESSAGE( STATUS "UNIX: " ${UNIX} )

# is TRUE on Windows, including CygWin 
MESSAGE( STATUS "WIN32: " ${WIN32} )

# is TRUE on Apple OS X
MESSAGE( STATUS "APPLE: " ${APPLE} )

# is TRUE when using the MinGW compiler in Windows
MESSAGE( STATUS "MINGW: " ${MINGW} )

# is TRUE on Windows when using the CygWin version of cmake
MESSAGE( STATUS "CYGWIN: " ${CYGWIN} )


SET(SUPPORTED_PLATFORMS STM32 MK CACHE INTERNAL "Supported ARM Cortex-M chip brands")

SET(SUPPORTED_FAMILIES_STM32 L0 L1 L4 F0 F1 F2 F3 F4 F7 CACHE INTERNAL "Supported Families STM32")
#SET(SUPPORTED_FAMILIES_MK 80 W40 W41 CACHE INTERNAL "Supported Families Kinetis")

IF(NOT CHIP)
    MESSAGE(FATAL_ERROR "No CHIP specified, please select part number using for example -DCHIP=STM32F746N")
ENDIF()

STRING(TOUPPER ${CHIP} CHIP)

FOREACH(i ${SUPPORTED_PLATFORMS})
  IF(${CHIP} MATCHES "^${i}.*$")
    SET(CHIP_PLATFORM ${i})
  ENDIF()
ENDFOREACH()

IF(NOT CHIP_PLATFORM)
    MESSAGE(FATAL_ERROR "Cannot match CHIP_PLATFORM to any of the supported platforms.")
ELSE()
    MESSAGE(STATUS "Selected CHIP_PLATFORM: ${CHIP_PLATFORM}")
ENDIF()

FOREACH(i ${SUPPORTED_FAMILIES_${CHIP_PLATFORM}})
  IF(${CHIP} MATCHES "^${CHIP_PLATFORM}${i}.*$")
    SET(CHIP_FAMILY ${i})
  ENDIF()
ENDFOREACH()

IF(NOT CHIP_FAMILY)
    MESSAGE(FATAL_ERROR "Cannot match CHIP_FAMILY to any of the supported families for ${CHIP_PLATFORM}.")
ELSE()
    MESSAGE(STATUS "Selected CHIP_FAMILY: ${CHIP_FAMILY}")
ENDIF()

# FIND ARM-NONE_EABI Toolchain
IF(NOT TOOLCHAIN_PREFIX)
  IF(WIN32)
    SET(TOOLCHAIN_PREFIX_1 "C:/arm-toolchain")
	SET(CMAKE_EXECUTABLE_SUFFIX ".exe")
  ELSE()
    SET(TOOLCHAIN_PREFIX_1 "/usr/gcc-arm-none-eabi")
  ENDIF()
  FILE(TO_CMAKE_PATH ${TOOLCHAIN_PREFIX_1} TOOLCHAIN_PREFIX)
ENDIF()

MESSAGE(STATUS "Using TOOLCHAIN_PREFIX: " ${TOOLCHAIN_PREFIX})

IF(NOT TARGET_TRIPLET)
    SET(TARGET_TRIPLET "arm-none-eabi")
    MESSAGE(STATUS "Using default TARGET_TRIPLET: " ${TARGET_TRIPLET})
ENDIF()

SET(TOOLCHAIN_BIN_DIR ${TOOLCHAIN_PREFIX}/bin)
SET(TOOLCHAIN_INC_DIR ${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}/include)
SET(TOOLCHAIN_LIB_DIR ${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}/lib)

# Set CMAKE toolchain
SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_PROCESSOR arm)

CMAKE_FORCE_C_COMPILER(${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gcc${CMAKE_EXECUTABLE_SUFFIX} GNU)
CMAKE_FORCE_CXX_COMPILER(${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-g++${CMAKE_EXECUTABLE_SUFFIX} GNU)
SET(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gcc${CMAKE_EXECUTABLE_SUFFIX})

SET(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-objcopy${CMAKE_EXECUTABLE_SUFFIX} CACHE INTERNAL "objcopy tool")
SET(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-objdump${CMAKE_EXECUTABLE_SUFFIX} CACHE INTERNAL "objdump tool")
SET(CMAKE_SIZE ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-size${CMAKE_EXECUTABLE_SUFFIX} CACHE INTERNAL "size tool")
SET(CMAKE_DEBUGER ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gdb${CMAKE_EXECUTABLE_SUFFIX} CACHE INTERNAL "debuger")

SET(CMAKE_C_FLAGS_DEBUG "-Og -g" CACHE INTERNAL "c compiler flags debug")
SET(CMAKE_CXX_FLAGS_DEBUG "-Og -g" CACHE INTERNAL "cxx compiler flags debug")
SET(CMAKE_ASM_FLAGS_DEBUG "-g" CACHE INTERNAL "asm compiler flags debug")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "linker flags debug")

SET(CMAKE_C_FLAGS_RELEASE "-Os -flto" CACHE INTERNAL "c compiler flags release")
SET(CMAKE_CXX_FLAGS_RELEASE "-Os -flto" CACHE INTERNAL "cxx compiler flags release")
SET(CMAKE_ASM_FLAGS_RELEASE "" CACHE INTERNAL "asm compiler flags release")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "-flto" CACHE INTERNAL "linker flags release")

SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET} ${EXTRA_FIND_PATH})
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

# Add .hex and -bin targets (depend from .elf)
FUNCTION(ARM_ADD_HEX_BIN_TARGETS TARGET)
    IF(EXECUTABLE_OUTPUT_PATH)
      SET(FILENAME "${EXECUTABLE_OUTPUT_PATH}/${TARGET}")
    ELSE()
      SET(FILENAME "${TARGET}")
    ENDIF()
    
    GET_FILENAME_COMPONENT(TARGET_WE ${FILENAME} NAME_WE)
    GET_FILENAME_COMPONENT(TARGET_DIR ${FILENAME} DIRECTORY)
    
    ADD_CUSTOM_TARGET(${TARGET_DIR}${TARGET_WE}.hex DEPENDS ${TARGET} COMMAND ${CMAKE_OBJCOPY} -Oihex ${FILENAME} ${TARGET_DIR}${TARGET_WE}.hex)
    ADD_CUSTOM_TARGET(${TARGET_DIR}${TARGET_WE}.bin DEPENDS ${TARGET} COMMAND ${CMAKE_OBJCOPY} -Obinary ${FILENAME} ${TARGET_DIR}${TARGET_WE}.bin)
ENDFUNCTION()

# Add size (depends from .elf)
FUNCTION(ARM_PRINT_SIZE_OF_TARGETS TARGET)
    IF(EXECUTABLE_OUTPUT_PATH)
      SET(FILENAME "${EXECUTABLE_OUTPUT_PATH}/${TARGET}")
    ELSE()
      SET(FILENAME "${TARGET}")
    ENDIF()
    add_custom_command(TARGET ${TARGET} POST_BUILD COMMAND ${CMAKE_SIZE} ${FILENAME})
ENDFUNCTION()

STRING(TOLOWER ${CHIP_PLATFORM} CHIP_PLATFORM_LOWER)
STRING(TOLOWER ${CHIP_FAMILY} CHIP_FAMILY_LOWER)
INCLUDE(gcc_${CHIP_PLATFORM_LOWER}${CHIP_FAMILY_LOWER})

# Find and set linker script
FUNCTION(ARM_SET_LDSCRIPT TARGET)
    IF(NOT LINKER_SCRIPT)
      FILE(GLOB LINKER_SCRIPT "*.ld")
      IF(NOT LINKER_SCRIPT)
        MESSAGE(FATAL-ERROR "No suitable LINKER_SCRIPT found.")
      ELSE()
        MESSAGE(STATUS "Found linker script: ${LINKER_SCRIPT}")
      ENDIF()
    ENDIF()
    
    IF(NOT EXISTS ${LINKER_SCRIPT})
      MESSAGE(FATAL_ERROR "Linker script not found: ${LINKER_SCRIPT}.")
    ENDIF()

    GET_TARGET_PROPERTY(TARGET_LD_FLAGS ${TARGET} LINK_FLAGS)
    IF(TARGET_LD_FLAGS)
        SET(TARGET_LD_FLAGS "-T${LINKER_SCRIPT} ${TARGET_LD_FLAGS}")
    ELSE()
        SET(TARGET_LD_FLAGS "-T${LINKER_SCRIPT}")
    ENDIF()
    SET_TARGET_PROPERTIES(${TARGET} PROPERTIES LINK_FLAGS ${TARGET_LD_FLAGS})
ENDFUNCTION()

FUNCTION(ARM_SET_TARGET_PROPERTIES TARGET)
	
    ARM_SET_LDSCRIPT(${TARGET})
    
ENDFUNCTION()

